/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, ToolResponse, ToolsResponse } from "./Registry.types";
export interface RegistryReadOnlyInterface {
  contractAddress: string;
  getTool: ({
    toolId
  }: {
    toolId: string;
  }) => Promise<ToolResponse>;
  getTools: () => Promise<ToolsResponse>;
}
export class RegistryQueryClient implements RegistryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getTool = this.getTool.bind(this);
    this.getTools = this.getTools.bind(this);
  }
  getTool = async ({
    toolId
  }: {
    toolId: string;
  }): Promise<ToolResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_tool: {
        tool_id: toolId
      }
    });
  };
  getTools = async (): Promise<ToolsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_tools: {}
    });
  };
}
export interface RegistryInterface extends RegistryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  registerTool: ({
    denom,
    description,
    endpoint,
    price,
    toolId
  }: {
    denom?: string;
    description: string;
    endpoint: string;
    price: Uint128;
    toolId: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updatePrice: ({
    price,
    toolId
  }: {
    price: Uint128;
    toolId: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateDenom: ({
    denom,
    toolId
  }: {
    denom: string;
    toolId: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateEndpoint: ({
    endpoint,
    toolId
  }: {
    endpoint: string;
    toolId: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  pauseTool: ({
    toolId
  }: {
    toolId: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  resumeTool: ({
    toolId
  }: {
    toolId: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class RegistryClient extends RegistryQueryClient implements RegistryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.registerTool = this.registerTool.bind(this);
    this.updatePrice = this.updatePrice.bind(this);
    this.updateDenom = this.updateDenom.bind(this);
    this.updateEndpoint = this.updateEndpoint.bind(this);
    this.pauseTool = this.pauseTool.bind(this);
    this.resumeTool = this.resumeTool.bind(this);
  }
  registerTool = async ({
    denom,
    description,
    endpoint,
    price,
    toolId
  }: {
    denom?: string;
    description: string;
    endpoint: string;
    price: Uint128;
    toolId: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_tool: {
        denom,
        description,
        endpoint,
        price,
        tool_id: toolId
      }
    }, fee_, memo_, funds_);
  };
  updatePrice = async ({
    price,
    toolId
  }: {
    price: Uint128;
    toolId: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_price: {
        price,
        tool_id: toolId
      }
    }, fee_, memo_, funds_);
  };
  updateDenom = async ({
    denom,
    toolId
  }: {
    denom: string;
    toolId: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_denom: {
        denom,
        tool_id: toolId
      }
    }, fee_, memo_, funds_);
  };
  updateEndpoint = async ({
    endpoint,
    toolId
  }: {
    endpoint: string;
    toolId: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_endpoint: {
        endpoint,
        tool_id: toolId
      }
    }, fee_, memo_, funds_);
  };
  pauseTool = async ({
    toolId
  }: {
    toolId: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause_tool: {
        tool_id: toolId
      }
    }, fee_, memo_, funds_);
  };
  resumeTool = async ({
    toolId
  }: {
    toolId: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      resume_tool: {
        tool_id: toolId
      }
    }, fee_, memo_, funds_);
  };
}