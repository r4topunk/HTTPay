/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin, StdFee } from "@cosmjs/amino";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import {
  useMutation,
  UseMutationOptions,
  useQuery,
  UseQueryOptions,
} from "@tanstack/react-query";
import { RegistryClient, RegistryQueryClient } from "./Registry.client";
import { ToolResponse, ToolsResponse, Uint128 } from "./Registry.types";

export const registryQueryKeys = {
  contract: [
    {
      contract: "registry",
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [
      {
        ...registryQueryKeys.contract[0],
        address: contractAddress,
      },
    ] as const,
  getTool: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...registryQueryKeys.address(contractAddress)[0],
        method: "get_tool",
        args,
      },
    ] as const,
  getTools: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...registryQueryKeys.address(contractAddress)[0],
        method: "get_tools",
        args,
      },
    ] as const,
};

export interface RegistryReactQuery<TResponse, TData = TResponse> {
  client: RegistryQueryClient | undefined;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}

export interface RegistryGetToolsQuery<TData>
  extends RegistryReactQuery<ToolsResponse, TData> {}

  export function useRegistryGetToolsQuery<TData = ToolsResponse>({
  client,
  options,
}: RegistryGetToolsQuery<TData>) {
  return useQuery<ToolsResponse, Error, TData>(
    registryQueryKeys.getTools(client?.contractAddress),
    () =>
      client ? client.getTools() : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}

export interface RegistryGetToolQuery<TData>
  extends RegistryReactQuery<ToolResponse, TData> {
  args: {
    toolId: string;
  };
}

export function useRegistryGetToolQuery<TData = ToolResponse>({
  client,
  args,
  options,
}: RegistryGetToolQuery<TData>) {
  return useQuery<ToolResponse, Error, TData>(
    registryQueryKeys.getTool(client?.contractAddress, args),
    () =>
      client
        ? client.getTool({
            toolId: args.toolId,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}

export interface RegistryResumeToolMutation {
  client: RegistryClient;
  msg: {
    toolId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}

export function useRegistryResumeToolMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, RegistryResumeToolMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, RegistryResumeToolMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.resumeTool(msg, fee, memo, funds),
    options
  );
}

export interface RegistryPauseToolMutation {
  client: RegistryClient;
  msg: {
    toolId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}

export function useRegistryPauseToolMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, RegistryPauseToolMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, RegistryPauseToolMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.pauseTool(msg, fee, memo, funds),
    options
  );
}

export interface RegistryUpdateEndpointMutation {
  client: RegistryClient;
  msg: {
    endpoint: string;
    toolId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}

export function useRegistryUpdateEndpointMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, RegistryUpdateEndpointMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, RegistryUpdateEndpointMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateEndpoint(msg, fee, memo, funds),
    options
  );
}

export interface RegistryUpdateDenomMutation {
  client: RegistryClient;
  msg: {
    denom: string;
    toolId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}

export function useRegistryUpdateDenomMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, RegistryUpdateDenomMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, RegistryUpdateDenomMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateDenom(msg, fee, memo, funds),
    options
  );
}

export interface RegistryUpdatePriceMutation {
  client: RegistryClient;
  msg: {
    price: Uint128;
    toolId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}

export function useRegistryUpdatePriceMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, RegistryUpdatePriceMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, RegistryUpdatePriceMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updatePrice(msg, fee, memo, funds),
    options
  );
}

export interface RegistryRegisterToolMutation {
  client: RegistryClient;
  msg: {
    denom?: string;
    description: string;
    endpoint: string;
    price: Uint128;
    toolId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}

export function useRegistryRegisterToolMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, RegistryRegisterToolMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, RegistryRegisterToolMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.registerTool(msg, fee, memo, funds),
    options
  );
}
